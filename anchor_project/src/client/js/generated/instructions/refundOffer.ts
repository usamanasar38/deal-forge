/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { DEALFORGE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const REFUND_OFFER_DISCRIMINATOR = new Uint8Array([
  171, 18, 70, 32, 244, 121, 60, 75,
]);

export function getRefundOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REFUND_OFFER_DISCRIMINATOR
  );
}

export type RefundOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountOfferedMint extends string | AccountMeta<string> = string,
  TAccountMakerOfferedAta extends string | AccountMeta<string> = string,
  TAccountOffer extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMaker extends string
        ? WritableSignerAccount<TAccountMaker> &
            AccountSignerMeta<TAccountMaker>
        : TAccountMaker,
      TAccountOfferedMint extends string
        ? ReadonlyAccount<TAccountOfferedMint>
        : TAccountOfferedMint,
      TAccountMakerOfferedAta extends string
        ? WritableAccount<TAccountMakerOfferedAta>
        : TAccountMakerOfferedAta,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RefundOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type RefundOfferInstructionDataArgs = {};

export function getRefundOfferInstructionDataEncoder(): FixedSizeEncoder<RefundOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: REFUND_OFFER_DISCRIMINATOR })
  );
}

export function getRefundOfferInstructionDataDecoder(): FixedSizeDecoder<RefundOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRefundOfferInstructionDataCodec(): FixedSizeCodec<
  RefundOfferInstructionDataArgs,
  RefundOfferInstructionData
> {
  return combineCodec(
    getRefundOfferInstructionDataEncoder(),
    getRefundOfferInstructionDataDecoder()
  );
}

export type RefundOfferAsyncInput<
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountMakerOfferedAta extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  makerOfferedAta?: Address<TAccountMakerOfferedAta>;
  offer: Address<TAccountOffer>;
  vault?: Address<TAccountVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getRefundOfferInstructionAsync<
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountMakerOfferedAta extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: RefundOfferAsyncInput<
    TAccountMaker,
    TAccountOfferedMint,
    TAccountMakerOfferedAta,
    TAccountOffer,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  RefundOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountMakerOfferedAta,
    TAccountOffer,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    makerOfferedAta: { value: input.makerOfferedAta ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.makerOfferedAta.value) {
    accounts.makerOfferedAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.makerOfferedAta),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRefundOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as RefundOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountMakerOfferedAta,
    TAccountOffer,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type RefundOfferInput<
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountMakerOfferedAta extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  makerOfferedAta: Address<TAccountMakerOfferedAta>;
  offer: Address<TAccountOffer>;
  vault: Address<TAccountVault>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getRefundOfferInstruction<
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountMakerOfferedAta extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: RefundOfferInput<
    TAccountMaker,
    TAccountOfferedMint,
    TAccountMakerOfferedAta,
    TAccountOffer,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RefundOfferInstruction<
  TProgramAddress,
  TAccountMaker,
  TAccountOfferedMint,
  TAccountMakerOfferedAta,
  TAccountOffer,
  TAccountVault,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    makerOfferedAta: { value: input.makerOfferedAta ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.makerOfferedAta),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getRefundOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as RefundOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountMakerOfferedAta,
    TAccountOffer,
    TAccountVault,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedRefundOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    maker: TAccountMetas[0];
    offeredMint: TAccountMetas[1];
    makerOfferedAta: TAccountMetas[2];
    offer: TAccountMetas[3];
    vault: TAccountMetas[4];
    tokenProgram: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: RefundOfferInstructionData;
};

export function parseRefundOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRefundOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      maker: getNextAccount(),
      offeredMint: getNextAccount(),
      makerOfferedAta: getNextAccount(),
      offer: getNextAccount(),
      vault: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getRefundOfferInstructionDataDecoder().decode(instruction.data),
  };
}
