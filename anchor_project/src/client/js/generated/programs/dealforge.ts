/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type Address,
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type ReadonlyUint8Array,
} from "gill";
import type { ParsedGreetInstruction } from "../instructions";

export const DEALFORGE_PROGRAM_ADDRESS =
  "FVszYwFasoQN81yjF4LMCYSzKaGUWkf9KTb3wTrs7mBd" as Address<"FVszYwFasoQN81yjF4LMCYSzKaGUWkf9KTb3wTrs7mBd">;

export enum DealforgeInstruction {
  Greet = 0,
}

export function identifyDealforgeInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): DealforgeInstruction {
  const data = "data" in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 194, 3, 150, 228, 58, 181, 62])
      ),
      0
    )
  ) {
    return DealforgeInstruction.Greet;
  }
  throw new Error(
    "The provided instruction could not be identified as a dealforge instruction."
  );
}

export type ParsedDealforgeInstruction<
  TProgram extends string = "FVszYwFasoQN81yjF4LMCYSzKaGUWkf9KTb3wTrs7mBd",
> = {
  instructionType: DealforgeInstruction.Greet;
} & ParsedGreetInstruction<TProgram>;
