/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { DEALFORGE_PROGRAM_ADDRESS } from '../programs';

/** InsufficientBalance: Insufficient token balance */
export const DEALFORGE_ERROR__INSUFFICIENT_BALANCE = 0x1770; // 6000
/** TransferFailed: Token transfer failed */
export const DEALFORGE_ERROR__TRANSFER_FAILED = 0x1771; // 6001
/** InvalidSaleToken: Invalid sale token */
export const DEALFORGE_ERROR__INVALID_SALE_TOKEN = 0x1772; // 6002
/** CalculationOverflow: Calculation overflow */
export const DEALFORGE_ERROR__CALCULATION_OVERFLOW = 0x1773; // 6003
/** OfferNotActive: Offer is not active */
export const DEALFORGE_ERROR__OFFER_NOT_ACTIVE = 0x1774; // 6004
/** ExceedsAvailableQuantity: Exceeds available quantity */
export const DEALFORGE_ERROR__EXCEEDS_AVAILABLE_QUANTITY = 0x1775; // 6005
/** OfferAlreadyFulfilled: Offer already fulfilled */
export const DEALFORGE_ERROR__OFFER_ALREADY_FULFILLED = 0x1776; // 6006
/** OfferExpired: Offer expired */
export const DEALFORGE_ERROR__OFFER_EXPIRED = 0x1777; // 6007
/** InvalidOfferedMintAmount: Invalid offered mint amount */
export const DEALFORGE_ERROR__INVALID_OFFERED_MINT_AMOUNT = 0x1778; // 6008
/** InvalidRequestedMintAmount: Invalid requested min amount */
export const DEALFORGE_ERROR__INVALID_REQUESTED_MINT_AMOUNT = 0x1779; // 6009
/** UnauthorizedMaker: unauthorized maker */
export const DEALFORGE_ERROR__UNAUTHORIZED_MAKER = 0x177a; // 6010

export type DealforgeError =
  | typeof DEALFORGE_ERROR__CALCULATION_OVERFLOW
  | typeof DEALFORGE_ERROR__EXCEEDS_AVAILABLE_QUANTITY
  | typeof DEALFORGE_ERROR__INSUFFICIENT_BALANCE
  | typeof DEALFORGE_ERROR__INVALID_OFFERED_MINT_AMOUNT
  | typeof DEALFORGE_ERROR__INVALID_REQUESTED_MINT_AMOUNT
  | typeof DEALFORGE_ERROR__INVALID_SALE_TOKEN
  | typeof DEALFORGE_ERROR__OFFER_ALREADY_FULFILLED
  | typeof DEALFORGE_ERROR__OFFER_EXPIRED
  | typeof DEALFORGE_ERROR__OFFER_NOT_ACTIVE
  | typeof DEALFORGE_ERROR__TRANSFER_FAILED
  | typeof DEALFORGE_ERROR__UNAUTHORIZED_MAKER;

let dealforgeErrorMessages: Record<DealforgeError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  dealforgeErrorMessages = {
    [DEALFORGE_ERROR__CALCULATION_OVERFLOW]: `Calculation overflow`,
    [DEALFORGE_ERROR__EXCEEDS_AVAILABLE_QUANTITY]: `Exceeds available quantity`,
    [DEALFORGE_ERROR__INSUFFICIENT_BALANCE]: `Insufficient token balance`,
    [DEALFORGE_ERROR__INVALID_OFFERED_MINT_AMOUNT]: `Invalid offered mint amount`,
    [DEALFORGE_ERROR__INVALID_REQUESTED_MINT_AMOUNT]: `Invalid requested min amount`,
    [DEALFORGE_ERROR__INVALID_SALE_TOKEN]: `Invalid sale token`,
    [DEALFORGE_ERROR__OFFER_ALREADY_FULFILLED]: `Offer already fulfilled`,
    [DEALFORGE_ERROR__OFFER_EXPIRED]: `Offer expired`,
    [DEALFORGE_ERROR__OFFER_NOT_ACTIVE]: `Offer is not active`,
    [DEALFORGE_ERROR__TRANSFER_FAILED]: `Token transfer failed`,
    [DEALFORGE_ERROR__UNAUTHORIZED_MAKER]: `unauthorized maker`,
  };
}

export function getDealforgeErrorMessage(code: DealforgeError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (dealforgeErrorMessages as Record<DealforgeError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isDealforgeError<TProgramErrorCode extends DealforgeError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    DEALFORGE_PROGRAM_ADDRESS,
    code
  );
}
