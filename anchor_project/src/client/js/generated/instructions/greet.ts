/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  type AccountMeta,
  type Address,
  combineCodec,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  transformEncoder,
} from "gill";
import { DEALFORGE_PROGRAM_ADDRESS } from "../programs";

export const GREET_DISCRIMINATOR = new Uint8Array([
  203, 194, 3, 150, 228, 58, 181, 62,
]);

export function getGreetDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(GREET_DISCRIMINATOR);
}

export type GreetInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type GreetInstructionData = { discriminator: ReadonlyUint8Array };

export type GreetInstructionDataArgs = {};

export function getGreetInstructionDataEncoder(): FixedSizeEncoder<GreetInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([["discriminator", fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: GREET_DISCRIMINATOR })
  );
}

export function getGreetInstructionDataDecoder(): FixedSizeDecoder<GreetInstructionData> {
  return getStructDecoder([
    ["discriminator", fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getGreetInstructionDataCodec(): FixedSizeCodec<
  GreetInstructionDataArgs,
  GreetInstructionData
> {
  return combineCodec(
    getGreetInstructionDataEncoder(),
    getGreetInstructionDataDecoder()
  );
}

export type GreetInput = {};

export function getGreetInstruction<
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(config?: {
  programAddress?: TProgramAddress;
}): GreetInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  const instruction = {
    programAddress,
    data: getGreetInstructionDataEncoder().encode({}),
  } as GreetInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedGreetInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: GreetInstructionData;
};

export function parseGreetInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>
): ParsedGreetInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getGreetInstructionDataDecoder().decode(instruction.data),
  };
}
