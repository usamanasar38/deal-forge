/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const MAKER_COUNTER_DISCRIMINATOR = new Uint8Array([
  86, 129, 100, 95, 125, 24, 138, 26,
]);

export function getMakerCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MAKER_COUNTER_DISCRIMINATOR
  );
}

export type MakerCounter = { discriminator: ReadonlyUint8Array; id: bigint };

export type MakerCounterArgs = { id: number | bigint };

export function getMakerCounterEncoder(): FixedSizeEncoder<MakerCounterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['id', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MAKER_COUNTER_DISCRIMINATOR })
  );
}

export function getMakerCounterDecoder(): FixedSizeDecoder<MakerCounter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['id', getU64Decoder()],
  ]);
}

export function getMakerCounterCodec(): FixedSizeCodec<
  MakerCounterArgs,
  MakerCounter
> {
  return combineCodec(getMakerCounterEncoder(), getMakerCounterDecoder());
}

export function decodeMakerCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MakerCounter, TAddress>;
export function decodeMakerCounter<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MakerCounter, TAddress>;
export function decodeMakerCounter<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MakerCounter, TAddress> | MaybeAccount<MakerCounter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMakerCounterDecoder()
  );
}

export async function fetchMakerCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MakerCounter, TAddress>> {
  const maybeAccount = await fetchMaybeMakerCounter(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMakerCounter<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MakerCounter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMakerCounter(maybeAccount);
}

export async function fetchAllMakerCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MakerCounter>[]> {
  const maybeAccounts = await fetchAllMaybeMakerCounter(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMakerCounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MakerCounter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMakerCounter(maybeAccount));
}

export function getMakerCounterSize(): number {
  return 16;
}
