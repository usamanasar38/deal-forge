/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { DEALFORGE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const TAKE_OFFER_DISCRIMINATOR = new Uint8Array([
  128, 156, 242, 207, 237, 192, 103, 240,
]);

export function getTakeOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(TAKE_OFFER_DISCRIMINATOR);
}

export type TakeOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountTaker extends string | AccountMeta<string> = string,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountOfferedMint extends string | AccountMeta<string> = string,
  TAccountRequestedMint extends string | AccountMeta<string> = string,
  TAccountTakerOfferedAta extends string | AccountMeta<string> = string,
  TAccountTakerRequestedAta extends string | AccountMeta<string> = string,
  TAccountMakerRequestedAta extends string | AccountMeta<string> = string,
  TAccountOffer extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountTaker extends string
        ? WritableSignerAccount<TAccountTaker> &
            AccountSignerMeta<TAccountTaker>
        : TAccountTaker,
      TAccountMaker extends string
        ? WritableAccount<TAccountMaker>
        : TAccountMaker,
      TAccountOfferedMint extends string
        ? ReadonlyAccount<TAccountOfferedMint>
        : TAccountOfferedMint,
      TAccountRequestedMint extends string
        ? ReadonlyAccount<TAccountRequestedMint>
        : TAccountRequestedMint,
      TAccountTakerOfferedAta extends string
        ? WritableAccount<TAccountTakerOfferedAta>
        : TAccountTakerOfferedAta,
      TAccountTakerRequestedAta extends string
        ? WritableAccount<TAccountTakerRequestedAta>
        : TAccountTakerRequestedAta,
      TAccountMakerRequestedAta extends string
        ? WritableAccount<TAccountMakerRequestedAta>
        : TAccountMakerRequestedAta,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type TakeOfferInstructionData = { discriminator: ReadonlyUint8Array };

export type TakeOfferInstructionDataArgs = {};

export function getTakeOfferInstructionDataEncoder(): FixedSizeEncoder<TakeOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: TAKE_OFFER_DISCRIMINATOR })
  );
}

export function getTakeOfferInstructionDataDecoder(): FixedSizeDecoder<TakeOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getTakeOfferInstructionDataCodec(): FixedSizeCodec<
  TakeOfferInstructionDataArgs,
  TakeOfferInstructionData
> {
  return combineCodec(
    getTakeOfferInstructionDataEncoder(),
    getTakeOfferInstructionDataDecoder()
  );
}

export type TakeOfferAsyncInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountRequestedMint extends string = string,
  TAccountTakerOfferedAta extends string = string,
  TAccountTakerRequestedAta extends string = string,
  TAccountMakerRequestedAta extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  requestedMint: Address<TAccountRequestedMint>;
  /** Taker’s token account for offered_mint (they’ll receive maker’s tokens) */
  takerOfferedAta?: Address<TAccountTakerOfferedAta>;
  /** Taker’s token account holding requested_mint */
  takerRequestedAta?: Address<TAccountTakerRequestedAta>;
  /** maker’s token account for requested_mint (where taker sends payment) */
  makerRequestedAta?: Address<TAccountMakerRequestedAta>;
  offer: Address<TAccountOffer>;
  vault?: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getTakeOfferInstructionAsync<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountRequestedMint extends string,
  TAccountTakerOfferedAta extends string,
  TAccountTakerRequestedAta extends string,
  TAccountMakerRequestedAta extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: TakeOfferAsyncInput<
    TAccountTaker,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountTakerOfferedAta,
    TAccountTakerRequestedAta,
    TAccountMakerRequestedAta,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountTakerOfferedAta,
    TAccountTakerRequestedAta,
    TAccountMakerRequestedAta,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    requestedMint: { value: input.requestedMint ?? null, isWritable: false },
    takerOfferedAta: { value: input.takerOfferedAta ?? null, isWritable: true },
    takerRequestedAta: {
      value: input.takerRequestedAta ?? null,
      isWritable: true,
    },
    makerRequestedAta: {
      value: input.makerRequestedAta ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.takerOfferedAta.value) {
    accounts.takerOfferedAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.takerRequestedAta.value) {
    accounts.takerRequestedAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.taker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.requestedMint.value)),
      ],
    });
  }
  if (!accounts.makerRequestedAta.value) {
    accounts.makerRequestedAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.requestedMint.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.requestedMint),
      getAccountMeta(accounts.takerOfferedAta),
      getAccountMeta(accounts.takerRequestedAta),
      getAccountMeta(accounts.makerRequestedAta),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getTakeOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountTakerOfferedAta,
    TAccountTakerRequestedAta,
    TAccountMakerRequestedAta,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type TakeOfferInput<
  TAccountTaker extends string = string,
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountRequestedMint extends string = string,
  TAccountTakerOfferedAta extends string = string,
  TAccountTakerRequestedAta extends string = string,
  TAccountMakerRequestedAta extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  taker: TransactionSigner<TAccountTaker>;
  maker: Address<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  requestedMint: Address<TAccountRequestedMint>;
  /** Taker’s token account for offered_mint (they’ll receive maker’s tokens) */
  takerOfferedAta: Address<TAccountTakerOfferedAta>;
  /** Taker’s token account holding requested_mint */
  takerRequestedAta: Address<TAccountTakerRequestedAta>;
  /** maker’s token account for requested_mint (where taker sends payment) */
  makerRequestedAta: Address<TAccountMakerRequestedAta>;
  offer: Address<TAccountOffer>;
  vault: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getTakeOfferInstruction<
  TAccountTaker extends string,
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountRequestedMint extends string,
  TAccountTakerOfferedAta extends string,
  TAccountTakerRequestedAta extends string,
  TAccountMakerRequestedAta extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: TakeOfferInput<
    TAccountTaker,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountTakerOfferedAta,
    TAccountTakerRequestedAta,
    TAccountMakerRequestedAta,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): TakeOfferInstruction<
  TProgramAddress,
  TAccountTaker,
  TAccountMaker,
  TAccountOfferedMint,
  TAccountRequestedMint,
  TAccountTakerOfferedAta,
  TAccountTakerRequestedAta,
  TAccountMakerRequestedAta,
  TAccountOffer,
  TAccountVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    taker: { value: input.taker ?? null, isWritable: true },
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    requestedMint: { value: input.requestedMint ?? null, isWritable: false },
    takerOfferedAta: { value: input.takerOfferedAta ?? null, isWritable: true },
    takerRequestedAta: {
      value: input.takerRequestedAta ?? null,
      isWritable: true,
    },
    makerRequestedAta: {
      value: input.makerRequestedAta ?? null,
      isWritable: true,
    },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.taker),
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.requestedMint),
      getAccountMeta(accounts.takerOfferedAta),
      getAccountMeta(accounts.takerRequestedAta),
      getAccountMeta(accounts.makerRequestedAta),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getTakeOfferInstructionDataEncoder().encode({}),
    programAddress,
  } as TakeOfferInstruction<
    TProgramAddress,
    TAccountTaker,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountTakerOfferedAta,
    TAccountTakerRequestedAta,
    TAccountMakerRequestedAta,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedTakeOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    taker: TAccountMetas[0];
    maker: TAccountMetas[1];
    offeredMint: TAccountMetas[2];
    requestedMint: TAccountMetas[3];
    /** Taker’s token account for offered_mint (they’ll receive maker’s tokens) */
    takerOfferedAta: TAccountMetas[4];
    /** Taker’s token account holding requested_mint */
    takerRequestedAta: TAccountMetas[5];
    /** maker’s token account for requested_mint (where taker sends payment) */
    makerRequestedAta: TAccountMetas[6];
    offer: TAccountMetas[7];
    vault: TAccountMetas[8];
    associatedTokenProgram: TAccountMetas[9];
    tokenProgram: TAccountMetas[10];
    systemProgram: TAccountMetas[11];
  };
  data: TakeOfferInstructionData;
};

export function parseTakeOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedTakeOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 12) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      taker: getNextAccount(),
      maker: getNextAccount(),
      offeredMint: getNextAccount(),
      requestedMint: getNextAccount(),
      takerOfferedAta: getNextAccount(),
      takerRequestedAta: getNextAccount(),
      makerRequestedAta: getNextAccount(),
      offer: getNextAccount(),
      vault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getTakeOfferInstructionDataDecoder().decode(instruction.data),
  };
}
