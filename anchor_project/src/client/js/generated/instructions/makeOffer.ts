/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { DEALFORGE_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MAKE_OFFER_DISCRIMINATOR = new Uint8Array([
  214, 98, 97, 35, 59, 12, 44, 178,
]);

export function getMakeOfferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(MAKE_OFFER_DISCRIMINATOR);
}

export type MakeOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountMaker extends string | AccountMeta<string> = string,
  TAccountOfferedMint extends string | AccountMeta<string> = string,
  TAccountRequestedMint extends string | AccountMeta<string> = string,
  TAccountMakerOfferedAta extends string | AccountMeta<string> = string,
  TAccountCounter extends string | AccountMeta<string> = string,
  TAccountOffer extends string | AccountMeta<string> = string,
  TAccountVault extends string | AccountMeta<string> = string,
  TAccountAssociatedTokenProgram extends
    | string
    | AccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountMaker extends string
        ? WritableSignerAccount<TAccountMaker> &
            AccountSignerMeta<TAccountMaker>
        : TAccountMaker,
      TAccountOfferedMint extends string
        ? ReadonlyAccount<TAccountOfferedMint>
        : TAccountOfferedMint,
      TAccountRequestedMint extends string
        ? ReadonlyAccount<TAccountRequestedMint>
        : TAccountRequestedMint,
      TAccountMakerOfferedAta extends string
        ? WritableAccount<TAccountMakerOfferedAta>
        : TAccountMakerOfferedAta,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountOffer extends string
        ? WritableAccount<TAccountOffer>
        : TAccountOffer,
      TAccountVault extends string
        ? WritableAccount<TAccountVault>
        : TAccountVault,
      TAccountAssociatedTokenProgram extends string
        ? ReadonlyAccount<TAccountAssociatedTokenProgram>
        : TAccountAssociatedTokenProgram,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MakeOfferInstructionData = {
  discriminator: ReadonlyUint8Array;
  offeredAmount: bigint;
  requestedAmount: bigint;
};

export type MakeOfferInstructionDataArgs = {
  offeredAmount: number | bigint;
  requestedAmount: number | bigint;
};

export function getMakeOfferInstructionDataEncoder(): FixedSizeEncoder<MakeOfferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['offeredAmount', getU64Encoder()],
      ['requestedAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: MAKE_OFFER_DISCRIMINATOR })
  );
}

export function getMakeOfferInstructionDataDecoder(): FixedSizeDecoder<MakeOfferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['offeredAmount', getU64Decoder()],
    ['requestedAmount', getU64Decoder()],
  ]);
}

export function getMakeOfferInstructionDataCodec(): FixedSizeCodec<
  MakeOfferInstructionDataArgs,
  MakeOfferInstructionData
> {
  return combineCodec(
    getMakeOfferInstructionDataEncoder(),
    getMakeOfferInstructionDataDecoder()
  );
}

export type MakeOfferAsyncInput<
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountRequestedMint extends string = string,
  TAccountMakerOfferedAta extends string = string,
  TAccountCounter extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  requestedMint: Address<TAccountRequestedMint>;
  makerOfferedAta?: Address<TAccountMakerOfferedAta>;
  counter?: Address<TAccountCounter>;
  offer: Address<TAccountOffer>;
  vault?: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  offeredAmount: MakeOfferInstructionDataArgs['offeredAmount'];
  requestedAmount: MakeOfferInstructionDataArgs['requestedAmount'];
};

export async function getMakeOfferInstructionAsync<
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountRequestedMint extends string,
  TAccountMakerOfferedAta extends string,
  TAccountCounter extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: MakeOfferAsyncInput<
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountMakerOfferedAta,
    TAccountCounter,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MakeOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountMakerOfferedAta,
    TAccountCounter,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    requestedMint: { value: input.requestedMint ?? null, isWritable: false },
    makerOfferedAta: { value: input.makerOfferedAta ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.makerOfferedAta.value) {
    accounts.makerOfferedAta.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.counter.value) {
    accounts.counter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            77, 65, 75, 69, 82, 95, 67, 79, 85, 78, 84, 69, 82, 95, 83, 69, 69,
            68,
          ])
        ),
        getAddressEncoder().encode(expectAddress(accounts.maker.value)),
      ],
    });
  }
  if (!accounts.vault.value) {
    accounts.vault.value = await getProgramDerivedAddress({
      programAddress:
        'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>,
      seeds: [
        getAddressEncoder().encode(expectAddress(accounts.offer.value)),
        getAddressEncoder().encode(expectAddress(accounts.tokenProgram.value)),
        getAddressEncoder().encode(expectAddress(accounts.offeredMint.value)),
      ],
    });
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.requestedMint),
      getAccountMeta(accounts.makerOfferedAta),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMakeOfferInstructionDataEncoder().encode(
      args as MakeOfferInstructionDataArgs
    ),
    programAddress,
  } as MakeOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountMakerOfferedAta,
    TAccountCounter,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type MakeOfferInput<
  TAccountMaker extends string = string,
  TAccountOfferedMint extends string = string,
  TAccountRequestedMint extends string = string,
  TAccountMakerOfferedAta extends string = string,
  TAccountCounter extends string = string,
  TAccountOffer extends string = string,
  TAccountVault extends string = string,
  TAccountAssociatedTokenProgram extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  maker: TransactionSigner<TAccountMaker>;
  offeredMint: Address<TAccountOfferedMint>;
  requestedMint: Address<TAccountRequestedMint>;
  makerOfferedAta: Address<TAccountMakerOfferedAta>;
  counter: Address<TAccountCounter>;
  offer: Address<TAccountOffer>;
  vault: Address<TAccountVault>;
  associatedTokenProgram?: Address<TAccountAssociatedTokenProgram>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  offeredAmount: MakeOfferInstructionDataArgs['offeredAmount'];
  requestedAmount: MakeOfferInstructionDataArgs['requestedAmount'];
};

export function getMakeOfferInstruction<
  TAccountMaker extends string,
  TAccountOfferedMint extends string,
  TAccountRequestedMint extends string,
  TAccountMakerOfferedAta extends string,
  TAccountCounter extends string,
  TAccountOffer extends string,
  TAccountVault extends string,
  TAccountAssociatedTokenProgram extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof DEALFORGE_PROGRAM_ADDRESS,
>(
  input: MakeOfferInput<
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountMakerOfferedAta,
    TAccountCounter,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MakeOfferInstruction<
  TProgramAddress,
  TAccountMaker,
  TAccountOfferedMint,
  TAccountRequestedMint,
  TAccountMakerOfferedAta,
  TAccountCounter,
  TAccountOffer,
  TAccountVault,
  TAccountAssociatedTokenProgram,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? DEALFORGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    maker: { value: input.maker ?? null, isWritable: true },
    offeredMint: { value: input.offeredMint ?? null, isWritable: false },
    requestedMint: { value: input.requestedMint ?? null, isWritable: false },
    makerOfferedAta: { value: input.makerOfferedAta ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    offer: { value: input.offer ?? null, isWritable: true },
    vault: { value: input.vault ?? null, isWritable: true },
    associatedTokenProgram: {
      value: input.associatedTokenProgram ?? null,
      isWritable: false,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.associatedTokenProgram.value) {
    accounts.associatedTokenProgram.value =
      'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL' as Address<'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.maker),
      getAccountMeta(accounts.offeredMint),
      getAccountMeta(accounts.requestedMint),
      getAccountMeta(accounts.makerOfferedAta),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.offer),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.associatedTokenProgram),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMakeOfferInstructionDataEncoder().encode(
      args as MakeOfferInstructionDataArgs
    ),
    programAddress,
  } as MakeOfferInstruction<
    TProgramAddress,
    TAccountMaker,
    TAccountOfferedMint,
    TAccountRequestedMint,
    TAccountMakerOfferedAta,
    TAccountCounter,
    TAccountOffer,
    TAccountVault,
    TAccountAssociatedTokenProgram,
    TAccountTokenProgram,
    TAccountSystemProgram
  >);
}

export type ParsedMakeOfferInstruction<
  TProgram extends string = typeof DEALFORGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    maker: TAccountMetas[0];
    offeredMint: TAccountMetas[1];
    requestedMint: TAccountMetas[2];
    makerOfferedAta: TAccountMetas[3];
    counter: TAccountMetas[4];
    offer: TAccountMetas[5];
    vault: TAccountMetas[6];
    associatedTokenProgram: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
  };
  data: MakeOfferInstructionData;
};

export function parseMakeOfferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMakeOfferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 10) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      maker: getNextAccount(),
      offeredMint: getNextAccount(),
      requestedMint: getNextAccount(),
      makerOfferedAta: getNextAccount(),
      counter: getNextAccount(),
      offer: getNextAccount(),
      vault: getNextAccount(),
      associatedTokenProgram: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMakeOfferInstructionDataDecoder().decode(instruction.data),
  };
}
